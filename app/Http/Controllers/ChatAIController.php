<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Product;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class ChatAIController extends Controller
{
    public function index()
    {
        return view('client.chatai.index');
    }

    public function send(Request $request)
    {
        $message = $request->input('message');

        $prompt = <<<EOT
B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ kh√°ch h√†ng mua s·∫Øm. C√≥ 4 lo·∫°i c√¢u h·ªèi:
1. C√¢u h·ªèi t√¨m s·∫£n ph·∫©m trong h·ªá th·ªëng (v√≠ d·ª•: gi√†y nike m√†u ƒë·ªè d∆∞·ªõi 1 tri·ªáu)
2. C√¢u h·ªèi ngo√†i h·ªá th·ªëng (v√≠ d·ª•: gi√†y nike c·ªßa n∆∞·ªõc n√†o, ch·ªçn gi√†y ch·∫°y b·ªô t·ªët...)
3. T√¨m s·∫£n ph·∫©m c√≥ gi√° cao nh·∫•t ho·∫∑c th·∫•p nh·∫•t
4. T√¨m s·∫£n ph·∫©m c√≥ nhi·ªÅu ho·∫∑c √≠t bi·∫øn th·ªÉ nh·∫•t

üëâ V·ªõi c√¢u h·ªèi t√¨m s·∫£n ph·∫©m:
{
  "type": "product_search",
  "product_name": "T√™n s·∫£n ph·∫©m ho·∫∑c r·ªóng",
  "color": "M√†u ho·∫∑c r·ªóng",
  "size": "K√≠ch th∆∞·ªõc ho·∫∑c r·ªóng",
  "min_price": s·ªë ho·∫∑c null,
  "max_price": s·ªë ho·∫∑c null
}

üëâ V·ªõi c√¢u h·ªèi ngo√†i h·ªá th·ªëng:
{
  "type": "general_question",
  "answer": "C√¢u tr·∫£ l·ªùi"
}

üëâ V·ªõi c√¢u h·ªèi t√¨m s·∫£n ph·∫©m gi√° cao/th·∫•p nh·∫•t:
{
  "type": "product_extreme_search",
  "order": "desc", // ho·∫∑c "asc"
  "limit": 1
}

üëâ V·ªõi c√¢u h·ªèi t√¨m s·∫£n ph·∫©m c√≥ nhi·ªÅu/√≠t bi·∫øn th·ªÉ:
{
  "type": "variant_extreme_search",
  "order": "desc", // ho·∫∑c "asc"
  "limit": 1
}

Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON. C√¢u h·ªèi: "$message"
EOT;

        $apiKey = env('GEMINI_API_KEY');
        $url = "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent?key={$apiKey}";

        $res = Http::withHeaders([
            'Content-Type' => 'application/json',
        ])->post($url, [
            'contents' => [
                [
                    'parts' => [
                        ['text' => $prompt]
                    ]
                ]
            ]
        ]);

        if (!$res->successful()) {
            return response()->json([
                'reply' => '‚ùå L·ªói g·ªçi AI',
                'status' => $res->status(),
                'error_message' => $res->body()
            ]);
        }

        $dataText = $res->json()['candidates'][0]['content']['parts'][0]['text'] ?? '';
        $dataText = trim(preg_replace('/^```json|```$/m', '', $dataText));

        try {
            $parsed = json_decode($dataText, true, 512, JSON_THROW_ON_ERROR);
        } catch (\Throwable $e) {
            Log::error('Kh√¥ng th·ªÉ parse JSON t·ª´ AI: ' . $dataText);
            return response()->json(['reply' => '‚ùå AI kh√¥ng hi·ªÉu y√™u c·∫ßu.']);
        }

        // Tr·∫£ l·ªùi ngo√†i h·ªá th·ªëng
        if (($parsed['type'] ?? '') === 'general_question') {
            return response()->json(['reply' => 'üí¨ ' . nl2br(e($parsed['answer']))]);
        }

        // T√¨m s·∫£n ph·∫©m gi√° cao nh·∫•t/th·∫•p nh·∫•t
        if (($parsed['type'] ?? '') === 'product_extreme_search') {
            $order = $parsed['order'] === 'asc' ? 'asc' : 'desc';
            $limit = $parsed['limit'] ?? 1;

            $products = Product::where('is_active', 1)
                ->orderByRaw("COALESCE(price_sale, base_price) $order")
                ->limit($limit)
                ->get();

            if ($products->isEmpty()) {
                return response()->json(['reply' => '‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.']);
            }

            $html = "<div><b>üéØ S·∫£n ph·∫©m c√≥ gi√° " . ($order === 'desc' ? 'cao' : 'th·∫•p') . " nh·∫•t:</b></div>";
            foreach ($products as $p) {
                $price = $p->price_sale ?? $p->base_price;
                $imageUrl = asset('storage/' . $p->img_thumbnail);
                $productUrl = url('/product/' . $p->slug);

                $html .= "
                <div class='product-card' style='border:1px solid #ddd; padding:10px; margin:10px 0; border-radius:5px; color: black;'>
                    <img src='{$imageUrl}' width='100' style='border-radius:5px;'><br>
                    <b>{$p->name}</b><br>
                    <span>Gi√°: " . number_format($price, 0, ',', '.') . "ƒë</span><br>
                    <span>{$p->description}</span><br>
                    <a href='{$productUrl}' class='btn' style='background:#007bff; color:white; padding:4px 8px; text-decoration:none; border-radius:4px;'>Xem chi ti·∫øt</a>
                </div>";
            }

            return response()->json(['reply' => $html]);
        }

        // T√¨m s·∫£n ph·∫©m nhi·ªÅu ho·∫∑c √≠t bi·∫øn th·ªÉ nh·∫•t
        if (($parsed['type'] ?? '') === 'variant_extreme_search') {
            $order = $parsed['order'] === 'asc' ? 'asc' : 'desc';
            $limit = $parsed['limit'] ?? 1;

            $products = Product::withCount('variants')
                ->where('is_active', 1)
                ->orderBy('variants_count', $order)
                ->limit($limit)
                ->get();

            if ($products->isEmpty()) {
                return response()->json(['reply' => '‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.']);
            }

            $html = "<div><b>üéØ S·∫£n ph·∫©m c√≥ " . ($order === 'desc' ? 'nhi·ªÅu' : '√≠t') . " bi·∫øn th·ªÉ nh·∫•t:</b></div>";
            foreach ($products as $p) {
                $price = $p->price_sale ?? $p->base_price;
                $imageUrl = asset('storage/' . $p->img_thumbnail);
                $productUrl = url('/product/' . $p->slug);

                $html .= "
                <div class='product-card' style='border:1px solid #ddd; padding:10px; margin:10px 0; border-radius:5px; color: black;'>
                    <img src='{$imageUrl}' width='100' style='border-radius:5px;'><br>
                    <b>{$p->name}</b><br>
                    <span>Gi√°: " . number_format($price, 0, ',', '.') . "ƒë</span><br>
                    <span>S·ªë bi·∫øn th·ªÉ: {$p->variants_count}</span><br>
                    <a href='{$productUrl}' class='btn' style='background:#007bff; color:white; padding:4px 8px; text-decoration:none; border-radius:4px;'>Xem chi ti·∫øt</a>
                </div>";
            }

            return response()->json(['reply' => $html]);
        }

        // T√¨m ki·∫øm s·∫£n ph·∫©m th√¥ng th∆∞·ªùng
        if (($parsed['type'] ?? '') !== 'product_search') {
            return response()->json(['reply' => '‚ùå C√¢u h·ªèi kh√¥ng h·ª£p l·ªá.']);
        }

        $query = Product::with(['variants.attributes.attributeValue'])->where('is_active', 1);

        if (!empty($parsed['product_name'])) {
            $query->where('name', 'like', '%' . $parsed['product_name'] . '%');
        }

        if (!empty($parsed['min_price'])) {
            $query->where(function ($q) use ($parsed) {
                $q->where('base_price', '>=', $parsed['min_price'])
                  ->orWhere('price_sale', '>=', $parsed['min_price']);
            });
        }

        if (!empty($parsed['max_price'])) {
            $query->where(function ($q) use ($parsed) {
                $q->where('base_price', '<=', $parsed['max_price'])
                  ->orWhere('price_sale', '<=', $parsed['max_price']);
            });
        }

        $products = $query->get();

        if (!empty($parsed['color']) || !empty($parsed['size'])) {
            $products = $products->filter(function ($product) use ($parsed) {
                return $product->variants->contains(function ($variant) use ($parsed) {
                    $values = $variant->attributes->map(function ($attr) {
                        return strtolower($attr->attributeValue->value);
                    })->toArray();

                    $matchColor = empty($parsed['color']) || collect($values)->contains(strtolower($parsed['color']));
                    $matchSize = empty($parsed['size']) || collect($values)->contains(strtolower($parsed['size']));

                    return $matchColor && $matchSize;
                });
            });
        }

        if ($products->isEmpty()) {
            return response()->json(['reply' => '‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.']);
        }

        $html = "<div><b>üéØ K·∫øt qu·∫£:</b></div>";
        foreach ($products as $p) {
            $price = $p->price_sale ?? $p->base_price;
            $imageUrl = asset('storage/' . $p->img_thumbnail);
            $productUrl = url('/product/' . $p->slug);

            $html .= "
            <div class='product-card' style='border:1px solid #ddd; padding:10px; margin:10px 0; border-radius:5px; color: black;'>
                <img src='{$imageUrl}' width='100' style='border-radius:5px;'><br>
                <b>{$p->name}</b><br>
                <span>Gi√°: " . number_format($price, 0, ',', '.') . "ƒë</span><br>
                <span>{$p->description}</span><br>
                <a href='{$productUrl}' class='btn' style='background:#007bff; color:white; padding:4px 8px; text-decoration:none; border-radius:4px;'>Xem chi ti·∫øt</a>
            </div>";
        }

        return response()->json(['reply' => $html]);
    }
}
